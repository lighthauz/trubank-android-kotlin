apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//Define which type of report you want to generate
  reports {
    xml.enabled = true
    html.enabled = true
  }
  //define which classes to exclude
  def fileFilter = [
          '**/R.class',
          '**/R$*.class',
          '**/BuildConfig.*',
          '**/Manifest*.*',
          '**/*$ViewInjector*.*',
          '**/*$ViewBinder*.*',
          '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
          '**/*Module.*', // Modules for Dagger.
          '**/*Dagger*.*', // Dagger auto-generated code.
          '**/*MembersInjector*.*', // Dagger auto-generated code.
          '**/*_Provide*Factory*.*',
          '**/*_Factory.*', //Dagger auto-generated code
          '**/*$*$*.*', // Anonymous classes generated by kotlin
          //add libraries
          'android/**/*.*',
          'com/**/*.*',
          'uk/**/*.*',
          'io/**/*.*',
          //remove what we don't test
          'androidTest/**/*.*',
          'test/**/*.*',
          '**/injector/**/*.*',
          '**/model/**/*.*',
          '**/mock/**/*.*',
          '**/event/**/*.*',
          '**/**_ViewBinding**',
          '**/*EventType.*',
          '**/**Mocked'
  ]
  def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/standardDebug/compileStandardDebugJavaWithJavac/classes/com/trusona/trubank", excludes: fileFilter)
  def mainSrc = "${project.projectDir}/src/main/java"

  classDirectories.from = files([debugTree])
  additionalSourceDirs.from = files([mainSrc])
  sourceDirectories.from = files([mainSrc])
  executionData.from = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

task jacoco {
  finalizedBy jacocoTestReport
}